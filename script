#!/bin/bash
#Authors Amanda NygÃ¥rds and Fabian Otterskog

#GLOBAL VARIABLES
# The home directory of System Manager.
SMHOME=$pwd
RED='\033[0;31m'
NC='\033[0m'
GO=1

#Create menu
printMenu() {
echo '***************************************************'
echo $'\t' "SYSTEM MANAGER (BETA)"
echo '---------------------------------------------------'
echo -e ${RED}ua${NC} - User Add$'\t'$'\t'"(Create an new user)"
echo -e ${RED}ul${NC} - User List$'\t'$'\t'"(List all login users)"
echo -e ${RED}uv${NC} - User View$'\t'$'\t'"(View user properties)"
echo -e ${RED}um${NC} - User Modify$'\t'"(Modify user properties)"
echo -e ${RED}ud${NC} - User Delete$'\t'"(Delete a login user)"
echo -e ${RED}ga${NC} - Group Add$'\t'$'\t'"(Create a new group)"
echo -e ${RED}gl${NC} - Group List$'\t'$'\t'"(List all groups, not system groups)"
echo -e ${RED}gv${NC} - Group View$'\t'$'\t'"(List all users in a group)"
echo -e ${RED}gm${NC} - Group Modify$'\t'"(Add/remove user to/from a group)"
echo -e ${RED}gd${NC} - Group Delete$'\t'"(Delete a group, not system groups)"
echo -e ${RED}fa${NC} - Folder Add$'\t'$'\t'"(Create a new folder)"
echo -e ${RED}fl${NC} - Folder List$'\t'$"(View content in a folder)"
echo -e ${RED}fv${NC} - Folder View$'\t'$"(View the properies of a folder)"
echo -e ${RED}fm${NC} - Folder Modify$'\t'"(Modify folder properties)"
echo -e ${RED}fd${NC} - Folder Delete$'\t'"(Delete a folder)"
echo -e ${RED}ss${NC} - SSH Server$'\t'$'\t'"(Manage SSH Server)"
echo -e ${RED}ex${NC} - Exit$'\t'$'\t'"(Exit System Manager)"
echo '---------------------------------------------------'
}

#Adds a user with useradd shell prompt
userAdd() {
read -p 'Username of new user: ' usrname
echo
adduser $usrname
echo '---------------------------------------------------'
}

#Lists all users
userList() {
echo 'Current login users on the system:'
echo '- - - - - - - - - - - - - - - - - - - - - - - - - -'
awk -F: '$3 >= 1000 && $4 <= 60000 && $1 != "nobody" {print $1}' /etc/passwd
echo '---------------------------------------------------'
}

userView() {
read -p 'User to view:' usrname
echo
grep $usrname /etc/passwd > /dev/null
if [ $? -eq 1 ]
then
    echo "User not found"
else

    #Grab users info from /etc/passwd
    echo -ne 'Username:\t'
    echo "$usrname"

    echo -ne 'Password:\t'
    egrep "$usrname" /etc/passwd | awk -F: '{print $2}'

    echo -ne 'User ID:\t'
    egrep "$usrname" /etc/passwd | awk -F: '{print $3}'

    echo -ne 'Group ID:\t'
    egrep "$usrname" /etc/passwd | awk -F: '{print $4}'

    echo -ne 'Comment:\t'
    egrep "$usrname" /etc/passwd | awk -F: '{print $5}'

    echo -ne 'Directory:\t'
    egrep "$usrname" /etc/passwd | awk -F: '{print $6}'

    echo -ne 'Shell:\t\t'
    egrep "$usrname" /etc/passwd | awk -F: '{print $7}'

    echo -ne "Groups:\t\t"
    groups "$usrname" | sed s/$usrname\ \:/''/
    echo
fi
echo '---------------------------------------------------'
}

#modify a user
userMod() {
read -p 'User to modify:' usrname
echo "what do you want to modify? Your oprions are:"
echo -e ${RED} 'Nm' ${NC} ' - (Name)'
echo -e ${RED} 'Pw' ${NC} ' - (Password)'
echo -e ${RED} 'Ud' ${NC} ' - (User ID)'
echo -e ${RED} 'Gd' ${NC} ' - (Group ID)'
echo -e ${RED} 'Cm' ${NC} ' - (Comment)'
echo -e ${RED} 'Hd' ${NC} ' - (Home ditectory)'
echo -e ${RED} 'Sh' ${NC} ' - (Shell)'
read -p 'Option to modify: ' modoption
read -p 'New value: ' newmod
if [ $modoption = "Pw" ]
then
        usermod -p "$newmod" $usrname
elif [ $modoption = "Ud" ]
then
        usermod -u "$newmod" $usrname
elif [ $modoption = "Gd" ]
then
        usermod -g "$newmod" $usrname
elif [ $modoption = "Cm" ]
then
        usermod -c "$newmod" $usrname
elif [ $modoption = "Hd" ]
then
        usermod -d "$newmod" $usrname
elif [ $modoption = "Sh" ]
then
        usermod -s "$newmod" $usrname
elif [ $modoption = "Nm" ]
then
        usermod -l "$newmod" $usrname
fi
echo '---------------------------------------------------'
}

#Delete user including home directory
userDel() {
echo "WARNING: You are about to delete a user."
read -p 'User to remove:' usrname
userdel -r $usrname &> /dev/null
}

#add a group
groupAdd() {
read -p 'Name of new group: ' gName
groupadd $gName &> /dev/null
if [ $? = 2 ]
then
    echo 'Group alreaddy exists or invalid input'
else
    echo 'Done'
fi
echo '---------------------------------------------------'
}

groupList() {
echo 'Current non system groups on the system:'
echo '- - - - - - - - - - - - - - - - - - - - - - - - - -'
awk -F: '$3 >= 1000  && $1 != "nogroup" {print $1}' /etc/group
echo '---------------------------------------------------'
}

groupView(){
echo "whitch group do you want to view?"
read -p 'groupname: ' gName
echo
echo "the members of $gName are: "
cat /etc/group | egrep $gName | awk -F: '{print "  "$4}' | sed y/,/'\n'/
echo '---------------------------------------------------'
}

groupMod() {
echo "Do you want to add to a group or remove from a group?"
read -p '(add/remove):' input
if [ $input = "add" ] 
then 
    echo "Which user to modify?:"
    read -p 'Username: ' usrname
    echo "Which group to add/remove from?:"
    read -p 'Group name: ' grpname
    echo "Adding $usrname to group $grpname."
    usermod -a -G $grpname $usrname
elif [ $input = "remove" ]
then
    echo "Which user to modify?:"
    read -p 'Username: ' usrname
    echo "Which group to add/remove from?:"
    read -p 'Group name: ' grpname
    deluser $usrname $grpname
else
    echo "Error: No valid input for (add/remove)"
fi
echo '---------------------------------------------------'
}

#Deletes a non system group
groupDel(){
echo "whitch group do you want to delete?"
read -p 'Name of group:' gName
if [ cat /etc/group | egrep $gName | awk -F: '{print $3}' > 999 ]
then
groupdel $gName
echo 'Done'
else
echo "you can't delete system groups!"
fi
echo '---------------------------------------------------'
}

folderAdd () {
read -p 'Path to new folder:' move
read -p 'Name of folder:' fname
cd $move
mkdir $fname
echo '---------------------------------------------------'
}

folderList(){
echo "whitch folder do you want list?"
read -p 'Path to folder:' fPath
ls $fPath &> /dev/null
if [ $? -eq 2 ]
then
        echo "Folder not found"
else
    echo
    echo "content of folder: "
    ls -a $fPath
    echo
fi
echo '---------------------------------------------------'
}

#list folder properties
folderView(){
read -p 'path to the folder to view:' foldername
echo

ls $foldername &> /dev/null
if [ $? -eq 2 ]
then
        echo "Folder not found"
else
        echo "properties for the folder: "
        echo

        echo -ne 'Owner: '
        ls -la $foldername | egrep ' \.$' | awk '{print $3}'

        echo -ne 'Last modified: '
        ls -la $foldername | egrep ' \.$' | awk '{print $7 " " $6}'

        echo 'Permissions: '
        echo -ne '  owner: '
        ls -la $foldername | egrep ' \.$' | awk '{print $1}' | egrep -o .........$ | egrep -o '^...'
        echo -ne '  group: '
        ls -la $foldername | egrep ' \.$' | awk '{print $1}' | egrep -o .........$ | egrep -o '^......' | egrep -o '...$'
        echo -ne '  others: '
        ls -la $foldername | egrep ' \.$' | awk '{print $1}' | egrep -o .........$ | egrep -o '...$'

        echo -n 'Sticky bit: ':
        ls -la $foldername | egrep ' \.$' | awk '{print $1}' | egrep -o .........$ | egrep 't' &> /dev/null
        if [ $? -eq 1 ]
        then
                echo No
        else
                echo Yes
        fi

        echo -n 'Setgid: ':
        ls -la $foldername | egrep ' \.$' | awk '{print $1}' | egrep -o .........$ | egrep 's' &> /dev/null
        if [ $? -eq 1 ]
        then
                echo No
        else
                echo Yes
        fi

fi
echo
echo '---------------------------------------------------'
}


folderMod() {
read -p 'Path of folder to modify: ' move
ls
read -p 'Name of folder' fname
echo '--------------------------------'
ls -l $fname
echo "--Options--"
echo rename $'\t'$'\t' - Rename selected folder.
echo privilegies $'\t' - Change privilegies for folder. 
echo stricky bit $'\t' - Change sticky bit.
echo setgid $'\t'$'\t' - Modify setgid.
echo lastmod $'\t' - Check and change last modified attribute.
read -p 'Option:' option
if [ $option = 'rename' ]
then
    read -p 'New name: ' nfname
    mv $move
    mv $fname $nfname
elif [ $option = 'privilegies' ]
then
    read -p 'Set privilegies: ' priv
    chmod $priv $fname
elif [ $option = 'sticky bit' ]
then
    read -p 'Have sticky bit? (yes/no): ' YNanswer
    if [ $YNanswer = 'yes' ]
    then
        chmod +t $fname
    else
        chmod -t $fname
    fi
elif [ $option = 'setgid' ]
then
    read -p 'Set setgid? (yes/no): ' YNanswer
        if [ $YNanswer = 'yes' ] 
        then
            chmod g+s $fname
        else 
            chmod g-s $fname
        fi
elif [ $option = 'lastmod' ]
then
    stat $fname
    read -p 'Change last modified attribute? (yes/no): ' YNanswer
    if [ $YNanswer = 'yes' ] 
    then
        read -p 'New date and time (YYYYMMDDHHmm): ' date
        touch -t $date $filename
    fi
else 
    echo "Invalid option"
fi
echo '---------------------------------------------------'
}


folderDel(){
read -p 'Path to folder to delete: ' DELPATH
ls $DELPATH &> /dev/null
if [ $? -eq 2 ]
then
    echo "Folder not found"
else
    read -p 'Are you sure about deleting the folder and everything in it? (Yes/n): ' YESNO
    if [ $YESNO = 'Yes' ]
    then
        echo "removing the folder"
        rm -r $DELPATH
    else
        echo 'deletion was stopped'
    fi
fi
echo '---------------------------------------------------'
}

sshMod(){
echo -e ${RED}'\tManage SSH Server'
echo '- - - - - - - - - - - - - - - - - - - - - - - - - -'
echo
echo -e ${RED}'in' ${NC}- 'install SSH server'
echo -e ${RED}'rm' ${NC}- 'remove SSH server'
echo -e ${RED}'on' ${NC}- 'start SSH server'
echo -e ${RED}'of' ${NC}- 'stop SSH sever'
echo '---------------------------------------------------'
read -p 'Choice: ' option
echo
if [ $option = 'in' ]
then
    apt install openssh-server
elif [ $option = 'rm' ]
then
    apt remove openssh-server
elif [ $option = 'on' ]
then
    systemctl start ssh
    if [ $? = 0 ]
    then
        echo "SSH is activated"
    else
        echo "unable to start ssh-server"
    fi
elif [ $option = 'of' ]
then
    systemctl stop ssh
    if [ $? = 0 ]
    then
        echo "SSH is deactivated"
    else
        echo "unable to stop ssh-server"
    fi
else
    echo "Choice was not valid!"
    echo
fi
echo '---------------------------------------------------'
}

printHeader(){
echo '***************************************************'
echo $'\t' "SYSTEM MANAGER (BETA)"
echo '---------------------------------------------------'
}

while [ $GO = 1 ]
do
    clear
    printMenu
    read -p 'Choice: ' option
    clear
    printHeader
    
    if [ $option = 'ua' ]
    then
        userAdd
        read -p 'Press enter to continue...'
    elif [ $option = 'ul' ]
    then
        userList
        read -p 'Press enter to continue...'
    elif [ $option = 'uv' ]
    then
        userView
        read -p 'Press enter to continue...'
    elif [ $option = 'um' ]
    then
        userMod
        read -p 'Press enter to continue...'
    elif [ $option = 'ud' ]
    then
        userDel
        read -p 'Press enter to continue...'
    elif [ $option = 'ga' ]
    then
        groupAdd
        read -p 'Press enter to continue...'
    elif [ $option = 'gl' ]
    then
        groupList
        read -p 'Press enter to continue...'
    elif [ $option = 'gv' ]
    then
        groupView
        read -p 'Press enter to continue...'
    elif [ $option = 'gm' ]
    then
        groupMod
        read -p 'Press enter to continue...'
    elif [ $option = 'gd' ]
    then
        groupDel
        read -p 'Press enter to continue...'
    elif [ $option = 'fa' ]
    then
        folderAdd
        read -p 'Press enter to continue...'
    elif [ $option = 'fl' ]
    then
        folderList
        read -p 'Press enter to continue...'
    elif [ $option = 'fv' ]
    then
        folderView
        read -p 'Press enter to continue...'
    elif [ $option = 'fm' ]
    then
        folderMod
        read -p 'Press enter to continue...'
    elif [ $option = 'fd' ]
    then
        folderDel
        read -p 'Press enter to continue...'
    elif [ $option = 'ss' ]
    then
        sshMod
        read -p 'Press enter to continue...'
    elif [ $option = 'ex' ]
    then
        GO=0
    fi
done
